{"version":3,"sources":["logo.jpg","facts.jpg","components/Home.js","components/Facts.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Home","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","className","Link","to","concat","process","Component","src","factsImg","style","width","float","marginLeft","href","App","BrowserRouter","basename","reactstrap_es","logo","alt","Switch","Route","exact","path","render","Home_Home","Facts_Home","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.32fef04d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.f68d1cdc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/facts.d0def6b3.jpg\";","import React, { Component } from \"react\";\nimport { Link as RouteLink } from 'react-router-dom';\n\nexport default class Home extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <h1>Welcome to Cats.ai, our showcase of feline wisdom.</h1>\n\n      <p>\n      Welcome to Cats.ai, our showcase of feline wisdom. This amazing website helps you to know that your cats might be more intelligent then you think. \n      See the amazing facts that validate our claim:\n      &nbsp;\n      <RouteLink to={`${process.env.PUBLIC_URL}/facts`}>Facts</RouteLink>\n      </p>\n\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Link as RouteLink } from \"react-router-dom\";\n\nimport factsImg from  '../facts.jpg';\n\nexport default class Home extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <h1>Welcome to Cats.ai, our showcase of feline wisdom.</h1>\n\n        <img src={factsImg} style={{width: '14em', float: 'left'}} />\n\n        <div style={{marginLeft: '15em'}}>\n        <h2>Facts</h2>\n        <p>\n          <ul>\n            <li>\n              Do you know, cats brain is more complex with almost 300 million\n              nerve cells compared to about 160 million in the dog.\n            </li>\n          </ul>\n        </p>\n\n        <p>\n          <ul>\n            <li>\n              Cats’ short-term memory lasted about 16 hours, whereas dogs’ only\n              lasted about five minutes.\n            </li>\n          </ul>\n        </p>\n\n        <p>\n          <ul>\n            <li>\n              A typical iPad has 60 gigabytes of data storage space, but your\n              cat’s brain has about 91,000 gigabytes.\n            </li>\n          </ul>\n        </p>\n\n        <p>\n          <ul>\n            <li>\n              An iPad has maximum 560 gigabytes of data storage space, Your\n              cat’s brain, on the other hand, does 6.1 trillion operations per\n              second. Unfortunately, your cat doesn’t have wi-fi and 4G data\n              access.\n            </li>\n          </ul>\n        </p>\n\n        <h2>References</h2>\n\n        <ul>\n          <li>\n            <a href=\"https://www.catster.com/lifestyle/cat-facts-anatomy-your-cats-brain\">\n              https://www.catster.com/lifestyle/cat-facts-anatomy-your-cats-brain\n            </a>\n          </li>\n        </ul>\n\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport logo from \"./logo.jpg\";\nimport \"./App.css\";\nimport { Route, Link as RouteLink, Redirect, Switch } from \"react-router-dom\";\nimport Home from \"./components/Home\";\nimport Facts from \"./components/Facts\";\n\nimport { ListGroup, ListGroupItem, Container, Row, Col } from \"reactstrap\";\n\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router basename=\"#/\">\n        <Container className=\"App\">\n          <Row className=\"header\">\n            <RouteLink to={`${process.env.PUBLIC_URL}/`}>\n              <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            </RouteLink>\n            <Col className=\"site-name\">\n              <h1>Cats.ai</h1>\n            </Col>\n            <Col className=\"nav\">\n              <div>\n                <RouteLink to={`${process.env.PUBLIC_URL}/`}>\n                  Home\n                </RouteLink>\n              </div>\n              <div>\n                <RouteLink to={`${process.env.PUBLIC_URL}/facts`}>\n                  Facts\n                </RouteLink>\n              </div>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Switch>\n                <Route\n                  exact\n                  path={`${process.env.PUBLIC_URL}/`}\n                  render={() => {\n                    return <Home />;\n                  }}\n                />\n\n                <Route\n                  path={`${process.env.PUBLIC_URL}/facts`}\n                  render={() => {\n                    return <Facts />;\n                  }}\n                />\n              </Switch>\n            </Col>\n          </Row>\n        </Container>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}